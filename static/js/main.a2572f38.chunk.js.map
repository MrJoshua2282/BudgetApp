{"version":3,"sources":["Top/Top.js","InputBar/InputBar.js","shared/convert.js","ListContainer/ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["Top","props","d","Date","day","getDay","date","getDate","year","getFullYear","className","onChange","changed","total","toLocaleString","InputBar","value","type","changeType","id","placeholder","description","changeDescription","changeValue","onClick","clicked","converter","num","insert","split","reverse","map","el","i","join","str","toString","includes","front","back","concat","ListContainer","incomeList","iArr","key","e","deleteItem","expenseList","eArr","App","state","completeListArr","incomeArr","expenseArr","addListItemHandler","event","target","trim","length","completeCopy","item","Math","random","now","push","incomeItems","filter","incomeTotalValue","reduce","acc","cur","expenseItems","document","querySelector","focus","setState","deleteListItemHandler","body","addEventListener","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAkBeA,G,YAdH,SAACC,GACT,IACIC,EAAI,IAAIC,KACNC,EAAMF,EAAEG,SACRC,EAAOJ,EAAEK,UACTC,EAAON,EAAEO,cACf,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,YAPZ,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAOrCN,GAAjC,IAAwCE,EAAxC,KAAgDE,GAChD,yBAAKE,UAAU,aAAaC,SAAUV,EAAMW,SAA5C,aAAgEX,EAAMY,MAAMC,qBCQzEC,G,MAjBE,SAACd,GACd,OACI,yBAAKS,UAAU,gBACX,4BAAQA,UAAU,aAAaM,MAAOf,EAAMgB,KAAMN,SAAUV,EAAMiB,YAC9D,4BAAQF,MAAM,SAASG,GAAG,SAAST,UAAU,eAA7C,UACA,4BAAQM,MAAM,UAAUG,GAAG,UAAUT,UAAU,eAA/C,YAGJ,2BAAOO,KAAK,OAAOP,UAAS,+BAAyC,WAAfT,EAAMgB,KAAN,8BAA4DG,YAAY,cAAcJ,MAAOf,EAAMoB,YAAaV,SAAUV,EAAMqB,oBAEtL,2BAAOL,KAAK,SAASP,UAAS,yBAAmC,WAAfT,EAAMgB,KAAN,8BAA4DG,YAAY,WAAWJ,MAAOf,EAAMe,MAAOL,SAAUV,EAAMsB,cAEzK,4BAAQb,UAAS,uBAAiC,WAAfT,EAAMgB,KAAN,8BAA4DD,MAAM,SAASQ,QAASvB,EAAMwB,SAA7H,U,eChBCC,EAAY,SAACC,GAEtB,IAAIC,EAAS,SAACD,GACV,OAAOA,EAAIE,MAAM,IAAIC,UAAUC,KAAI,SAACC,EAAIC,GACpC,OAAIA,EAAI,IAAM,GAAW,IAANA,EACfD,EAAE,UAAMA,EAAN,KAGCA,KACRF,UAAUI,KAAK,KAGlBC,GAXJR,GAAOA,GAWOS,WACd,GAAID,EAAIE,SAAS,KAAM,CAAC,IAAD,EACCF,EAAIN,MAAM,KADX,mBACdS,EADc,KACPC,EADO,KAEnB,OAAOX,EAAOU,GAAOE,OAAd,WAAyBD,IAGhC,OAAOX,EADCO,ICiBDM,EA9BO,SAACxC,GACnB,IAAIyC,EAAazC,EAAM0C,KAAKZ,KAAI,SAACC,EAAIC,GACjC,OACI,wBAAIW,IAAKX,GAAID,EAAGX,YAAhB,MAAgCK,EAAUM,EAAGhB,OAA7C,IAAqD,4BAAQN,UAAU,aAAac,QAAS,SAAAqB,GAAC,OAAI5C,EAAM6C,WAAWD,EAAGb,EAAGb,MAApE,SAIzD4B,EAAc9C,EAAM+C,KAAKjB,KAAI,SAACC,EAAIC,GAClC,OACI,wBAAIW,IAAKX,GAAID,EAAGX,YAAhB,MAAgCK,EAAUM,EAAGhB,OAA7C,IAAqD,4BAAQN,UAAU,aAAac,QAAS,SAAAqB,GAAC,OAAI5C,EAAM6C,WAAWD,EAAGb,EAAGb,MAApE,SAG7D,OACI,yBAAKT,UAAU,iBACX,yBAAKA,UAAU,QACX,sCACA,4BACKgC,IAGT,yBAAKhC,UAAU,QACX,uCACA,4BACKqC,MC4CNE,E,4MA/DbC,MAAQ,CACNjC,KAAM,SACNI,YAAa,GACbL,MAAO,GACPmC,gBAAiB,GACjBC,UAAW,GACXC,WAAY,GACZxC,MAAO,G,EASTyC,mBAAqB,SAACC,GACpB,GAAkB,UAAdA,EAAMX,KAA0C,WAAvBW,EAAMC,OAAOxC,MAA1C,CAD8B,MAGK,EAAKkC,MAAlCjC,EAHwB,EAGxBA,KAAMI,EAHkB,EAGlBA,YAAaL,EAHK,EAGLA,MACzB,GAAkC,IAA9BK,EAAYoC,OAAOC,QAA0B,KAAV1C,EAAvC,CAEA,IAAI2C,EAAY,YAAO,EAAKT,MAAMC,iBAE9BS,EAAO,CAAE3C,OAAMI,cAAaL,QAAOG,GAD9B0C,KAAKC,SAAW3D,KAAK4D,OAE9BJ,EAAaK,KAAKJ,GAClB,IAAIK,EAAcN,EAAaO,QAAO,SAAAlC,GAAE,MAAgB,WAAZA,EAAGf,QAC3CkD,GAAoBF,EAAYlC,KAAI,SAAAC,GAAE,OAAIA,EAAGhB,SAAOoD,QAAO,SAACC,EAAKC,GAAN,OAAcD,IAAQC,IAAK,GACtFC,EAAeZ,EAAaO,QAAO,SAAAlC,GAAE,MAAgB,YAAZA,EAAGf,QAE5CJ,EAAQsD,GADaI,EAAaxC,KAAI,SAAAC,GAAE,OAAIA,EAAGhB,SAAOoD,QAAO,SAACC,EAAKC,GAAN,OAAcD,IAAQC,IAAK,GAG5FE,SAASC,cAAc,yBAAyBC,QAEhD,EAAKC,SAAS,CAAExB,gBAAiBQ,EAAcP,UAAWa,EAAaZ,WAAYkB,EAAclD,YAAa,GAAIL,MAAO,GAAIH,MAAOA,O,EAGtI+D,sBAAwB,SAACrB,EAAOpC,GAC9B,IAAIwC,EAAY,YAAO,EAAKT,MAAMC,iBAG9Bc,GADJN,EAAeA,EAAaO,QAAO,SAAAlC,GAAE,OAAIA,EAAGb,KAAOA,MACpB+C,QAAO,SAAAlC,GAAE,MAAgB,WAAZA,EAAGf,QAC3CkD,GAAoBF,EAAYlC,KAAI,SAAAC,GAAE,OAAIA,EAAGhB,SAAOoD,QAAO,SAACC,EAAKC,GAAN,OAAcD,IAAQC,IAAK,GACtFC,EAAeZ,EAAaO,QAAO,SAAAlC,GAAE,MAAgB,YAAZA,EAAGf,QAE5CJ,EAAQsD,GADaI,EAAaxC,KAAI,SAAAC,GAAE,OAAIA,EAAGhB,SAAOoD,QAAO,SAACC,EAAKC,GAAN,OAAcD,IAAQC,IAAK,GAG5F,EAAKK,SAAS,CAAExB,gBAAiBQ,EAAcP,UAAWa,EAAaZ,WAAYkB,EAAc1D,MAAOA,K,kEApCxG2D,SAASC,cAAc,yBAAyBC,QAEhDF,SAASK,KAAKC,iBAAiB,UAAWC,KAAKzB,sB,+BAoCvC,IAAD,OACP,OACE,yBAAK5C,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAKE,QAAS,SAAAiC,GAAC,OAAI,EAAK8B,SAAS,CAAE9D,MAAOgC,EAAEW,OAAOxC,SAAUH,MAAOkE,KAAK7B,MAAMrC,QAE/E,kBAAC,EAAD,CAAUI,KAAM8D,KAAK7B,MAAMjC,KAAMI,YAAa0D,KAAK7B,MAAM7B,YAAaL,MAAO+D,KAAK7B,MAAMlC,MAAOE,WAAY,SAAA2B,GAAC,OAAI,EAAK8B,SAAS,CAAE1D,KAAM4B,EAAEW,OAAOxC,SAAUM,kBAAmB,SAAAuB,GAAC,OAAI,EAAK8B,SAAS,CAAEtD,YAAawB,EAAEW,OAAOxC,SAAUO,YAAa,SAAAsB,GAAC,OAAI,EAAK8B,SAAS,CAAE3D,MAAO6B,EAAEW,OAAOxC,SAAUS,QAASsD,KAAKzB,sBAG7S,kBAAC,EAAD,CAAeX,KAAMoC,KAAK7B,MAAME,UAAWJ,KAAM+B,KAAK7B,MAAMG,WAAYP,WAAYiC,KAAKH,6B,GA3D/EI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2572f38.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Top.css';\n\nconst Top = (props) => {\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    let d = new Date();\n    const day = d.getDay();\n    const date = d.getDate();\n    const year = d.getFullYear();\n    return (\n        <div className='top-div'>\n            <div className='top-date' >{days[day]} {date}, {year}</div>\n            <div className='top-amount' onChange={props.changed}>Balance: ${props.total.toLocaleString()}</div>\n        </div>\n    );\n};\n\nexport default Top;","import React from 'react';\n\nimport './InputBar.css';\n\nconst InputBar = (props) => {\n    return (\n        <div className='inputBar-div'>\n            <select className='selectType' value={props.type} onChange={props.changeType} >\n                <option value='income' id='income' className='optionValue' >income</option>\n                <option value='expense' id='expense' className='optionValue' >expense</option>\n            </select>\n\n            <input type='text' className={`inputBar-description ${props.type === 'income' ? `incomeStyle` : `expenseStyle`}`} placeholder='description' value={props.description} onChange={props.changeDescription} />\n\n            <input type='number' className={`inputBar-input ${props.type === 'income' ? `incomeStyle` : `expenseStyle`}`} placeholder='$ amount' value={props.value} onChange={props.changeValue} />\n\n            <button className={`inputBar-btn ${props.type === 'income' ? `incomeStyle` : `expenseStyle`}`} value='addBtn' onClick={props.clicked}>add</button>\n        </div >\n    );\n};\n\nexport default InputBar;","export const converter = (num) => {\n    num = +num;\n    let insert = (num) => {\n        return num.split('').reverse().map((el, i) => {\n            if (i % 3 === 0 && i !== 0) {\n                el = `${el},`;\n                return el;\n            };\n            return el;\n        }).reverse().join('');\n    }\n    let front;\n    let str = num.toString();\n    if (str.includes('.')) {\n        let [front, back] = str.split('.');\n        return insert(front).concat(`.${back}`);\n    } else {\n        front = str;\n        return insert(front);\n    }\n};","import React from 'react';\n\nimport './ListContainer.css';\nimport { converter } from '../shared/convert';\nconst ListContainer = (props) => {\n    let incomeList = props.iArr.map((el, i) => {\n        return (\n            <li key={i}>{el.description}: ${converter(el.value)} <button className='removeItem' onClick={e => props.deleteItem(e, el.id)}>x</button></li>\n        );\n    });\n\n    let expenseList = props.eArr.map((el, i) => {\n        return (\n            <li key={i}>{el.description}: ${converter(el.value)} <button className='removeItem' onClick={e => props.deleteItem(e, el.id)}>x</button></li>\n        );\n    });\n    return (\n        <div className='listContainer'>\n            <div className='list'>\n                <h1>Income</h1>\n                <ul>\n                    {incomeList}\n                </ul>\n            </div>\n            <div className='list'>\n                <h1>Expense</h1>\n                <ul>\n                    {expenseList}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default ListContainer;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Top from './Top/Top';\nimport InputBar from './InputBar/InputBar';\nimport ListContainer from './ListContainer/ListContainer';\n\nclass App extends Component {\n  state = {\n    type: 'income',\n    description: '',\n    value: '',\n    completeListArr: [],\n    incomeArr: [],\n    expenseArr: [],\n    total: 0\n  }\n\n  componentDidMount() {\n    document.querySelector('.inputBar-description').focus();\n\n    document.body.addEventListener('keydown', this.addListItemHandler);\n  }\n\n  addListItemHandler = (event) => {\n    if (event.key !== 'Enter' && event.target.value !== 'addBtn') return;\n\n    let { type, description, value } = this.state\n    if (description.trim().length === 0 || value === '') return;\n\n    let completeCopy = [...this.state.completeListArr];\n    let id = Math.random() + Date.now();\n    let item = { type, description, value, id };\n    completeCopy.push(item);\n    let incomeItems = completeCopy.filter(el => el.type === 'income');\n    let incomeTotalValue = +incomeItems.map(el => el.value).reduce((acc, cur) => acc += +cur, 0);\n    let expenseItems = completeCopy.filter(el => el.type === 'expense');\n    let expenseTotalValue = +expenseItems.map(el => el.value).reduce((acc, cur) => acc += +cur, 0);\n    let total = incomeTotalValue - expenseTotalValue;\n\n    document.querySelector('.inputBar-description').focus();\n\n    this.setState({ completeListArr: completeCopy, incomeArr: incomeItems, expenseArr: expenseItems, description: '', value: '', total: total });\n  }\n\n  deleteListItemHandler = (event, id) => {\n    let completeCopy = [...this.state.completeListArr];\n\n    completeCopy = completeCopy.filter(el => el.id !== id);\n    let incomeItems = completeCopy.filter(el => el.type === 'income');\n    let incomeTotalValue = +incomeItems.map(el => el.value).reduce((acc, cur) => acc += +cur, 0);\n    let expenseItems = completeCopy.filter(el => el.type === 'expense');\n    let expenseTotalValue = +expenseItems.map(el => el.value).reduce((acc, cur) => acc += +cur, 0);\n    let total = incomeTotalValue - expenseTotalValue;\n\n    this.setState({ completeListArr: completeCopy, incomeArr: incomeItems, expenseArr: expenseItems, total: total });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Top changed={e => this.setState({ total: e.target.value })} total={this.state.total} />\n\n          <InputBar type={this.state.type} description={this.state.description} value={this.state.value} changeType={e => this.setState({ type: e.target.value })} changeDescription={e => this.setState({ description: e.target.value })} changeValue={e => this.setState({ value: e.target.value })} clicked={this.addListItemHandler} />\n        </div>\n\n        <ListContainer iArr={this.state.incomeArr} eArr={this.state.expenseArr} deleteItem={this.deleteListItemHandler} />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}